---
title: "RNA-Sequenzierungs-Analyse - Aufgaben"
author: "Ivanna Marchesini"
format:
  html:
    toc: true
    number-sections: true
    df-print: paged
    code-fold: true
    embed-resources: true
execute:
  cache: true
  echo: true
  warning: false
  error: false
editor: source
---

# Einführung

Wir bitten euch hier, die grundlegenden Schritte einer RNA-Sequenzierungs-Analyse durchzuführen. Wir stellen euch bereits die auf das menschliche Referenzgenom ausgerichteten Reads zur Verfügung, d.h. euer Ausgangspunkt sind die "Raw Counts" für alle Gene jeder Probe. Zusammen mit den Counts stellen wir euch die Annotationstabelle zur Verfügung, die die Proben-IDs mit den tatsächlichen biologischen Bedingungen verknüpft. Der Datensatz stammt aus einem wissenschaftlichen Projekt, an dem wir hier in Freiburg arbeiten. Der Datensatz enthält Expressionsdaten eines Rektumadenokarzinoms, welches Varianten in ***BRAF^D594G^***, ***KRAS^G12A^*** und ***TP53^R175H^*** trägt. Mit dem RNA-Seq-Experiment soll untersucht werden, welchen Einfluss die Medikamente **Sorafenib** und **Trametinib** auf das Expressionsmuster der Tumorzellen haben. Um die Vergleiche vornehme zu können wurde ebenfalls eine Kontrollprobe mit **Dimethylsulfoxid** (DMSO) generiert. DMSO wurde gewählt, da die Medikamente darin gelöst sind, um sie den Zellen zuverabreichen. Wir betrachten im folgenden also die biologischen Bedingungen **DMSO**, **Sorafenib** (Sora) und **Trametinib** (Tram). Für alle Bedingungen liegen zwei biologische Replikate vor.

Das Ziel dieser Aufgabe ist es die signifikant veränderten Gene zwischen der Kontrolle (DMSO) und den beiden Behandlungen (Sora und Tram) zu finden. Des weiteren interssiert uns auch, ob es Unterschiede zwischen den Behandlungen gibt. Dabei hilft uns in beiden Fällen die Analyse der differentiell exprimierten Gene (DEG).

Im folgenden beschreiben wir die Aufgaben und geben euch weitere Hinweise und Erklärungen.

Wir werden in den nächsten Wochen schrittweise folgende Punkte bearbeiten:

1.  Importieren der Count Daten und erstellen einer Count Matrix
2.  Verknüpfung der Daten zu tatsächlichen biologischen Bedingungen
3.  Erstellen einer Tabelle, die alle Gene und ihre zugehörigen Gen-Identifikatoren enthält.
4.  Berechnung einer Hauptkomponentenanalyse (PCA), um einen ersten Überblick über den Datensatz zu erhalten
5.  Die DEG-Analyse
6.  Vergleich zwischen den Medikamenten
7.  Gene-Set Enrichment Analyse (GSEA)
8.  Visualisieren und Exportieren der Ergebnisse

Daraus resultieren folgende Aufgaben/ Fragen für euch. Wir haben diese auf die drei verbleibenden Wochen aufgeteilt. Weitere Details findet ihr fortlaufend in diesem Dokument.

**Aufgaben/ Fragen Woche 4**

Vorbereitung:

1.  Importiert die Count-Daten und erstellt daraus eine Count-Matrix
2.  Erstellt eine Tabelle, die alle gemessenen Gene und all ihre verschiedenen IDs enthält.
3.  Ordnet den Proben ihre biologische Bedingung zu
4.  Erstellt das DESeq2 Objekt und normalisiert die Daten
5.  Erstellt zwei QC Abbildungen, einmal mit den Roh-Counts und einmal mit den normalisierten Count-Werten.

**Aufgaben/ Fragen Woche 5**

DEG-Analyse:

1.  Berechnet eine Principal Component Analysis (PCA) und stellt diese grafisch dar.
2.  Baut auf dem DESeq2 Objekt auf und führt die *"Differentially Expressed Genes"* (DEG) Analyse durch.
    i)  Bestimmt die DEGs für die beiden Vergleiche Sorafenib vs DMSO und Trametinib vs DMSO
    ii) Wie viele DEGs konntet ihr pro Vergleich identifizieren? (Cutoff padj \< 0.05)
    iii) Wie verteilen sich die Anzahl der DEGs auf hoch- bzw. runter-reguliert? (log2FoldChange \> bzw. \< 0)
    iv) Stellt die Anzahlen grafisch z.B. als Barplot dar.
3.  Baut die signifikanten DEGs als Übersichtstabellen ins HTML ein.
4.  Stellt die Ergebnisse der DEG-Analyse mit Hilfe eines *Volcano Plots* dar.

**Aufgabe/ Fragen Woche 6**

Vergleich der beiden Medikamente:

1.  Findet Gemeinsamkeiten und Unterschiede zwischen den beiden Medikamenten im Vergleich zu DMSO.
2.  Wendet einen Exakten Test nach Fischer an um aus den Genen veränderte Gensets/ Signalwege abzuleiten. Diese Art der Analyse nennt man *funktionelle Analyse* oder auch *"Gene-Set Enrichment Analysis (GSEA)"*.
3.  Stellt die Ergebnisse grafisch dar.

## R Pakete

Verwendete R Paket:

```{r}
#| collapse: false

#if (!require("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install(version = "3.21")

library(DESeq2)
library(openxlsx)
library(pheatmap)
library(org.Hs.eg.db)
library(ggplot2)
library(FactoMineR)
library(ggrepel)
library(apeglm)
library(ggrepel)
library(viridis)
library(tidyverse)
library(kableExtra)
library(pheatmap)
library(genefilter)
library(EnhancedVolcano)
library(UpSetR)
library(vsn)
library(msigdbr)
library(doMC) # falls es hiermit Probleme gibt könnt ihr das Paket auch weglassen
library(foreach) # falls es hiermit Probleme gibt könnt ihr das Paket auch weglassen
library(BiocParallel) # falls es hiermit Probleme gibt könnt ihr das Paket auch weglassen
# optional -> increase speed of analysis due to multicore processing
register(MulticoreParam(4)) # -> diese Zeile löschen, wenn es Probleme mit den Paketen doMC, foreach und/ oder BiocParallel gab
```

Hinweis: Falls diese nicht installiert sind, können sie mit dem Paketmanager von [bioconductor](https://www.bioconductor.org/install/) `BiocManager::install()` oder `install.packages()` installiert werden.

## Konfiguration

```{r}
#| warning: false
#| 
## general config
mainDir <- getwd()
analysisDir <- file.path(mainDir, "analysis")
degDIR <- file.path(analysisDir, "DEG")
gseaDIR <- file.path(analysisDir, "GSEA")
gageDIR <- file.path(analysisDir, "GSEA", "GAGE")
if (!dir.exists(degDIR)) dir.create(degDIR, recursive = TRUE)
if (!dir.exists(gageDIR)) dir.create(gageDIR, recursive = TRUE)
```

**Setzen des Arbeitsverzeichnisses:** Die Funktion `setwd()` setz das Arbeitsverzeichnis und `getwd()` liest das aktuelle Arbeitsverzeichnis aus.

```{r}
setwd(mainDir)
getwd()
```

Bei nicht UNIX basierten Betriebssystemen, z.B. Microsoft Windows, müsst ihr aufpassen, da dort der Backslash als Trenner verwendet wird. Ihr könnte aber, wenn ihr nicht sicher sein, auch die Funktion `file.path(..., fsep = .Platform\$file.sep)` vewenden, z.B.

```{r}
#| warning: false
#| eval: false
file.path(
  "~",
  "workspace",
  "RStudio",
  "MIRACUM_BIDS_Bioinformatik_Systembiologie_RNA_Sequenzierung_Aufgabe"
)
```

## Funktionen

Wir stellen euch ein paar Funktionen zur Verfügung, die euch bei der Konvertierung der verschiedenen Gen-IDs unterstützen können. Alle Konvertierungen sind in der Hauptfunktion `getGeneMat()` zusammengefasst. Diese nimmt als Input die ENSEMBL Gen-IDs und konvertiert diese in die anderen und fasst alles zu einem *"data.frame"* zusammen.

```{r}
ensembl2entrez <- function(ensembl) {
  entrez <- mget(as.character(ensembl), org.Hs.egENSEMBL2EG, ifnotfound = NA)
  entrez <- lapply(entrez, function(i) return(i[1]))
  return(unlist(entrez))
}

entrez2ensembl <- function(entrez) {
  esbl <- mget(as.character(entrez), org.Hs.egENSEMBL, ifnotfound = NA)
  esbl <- lapply(esbl, function(i) return(i[1]))
  return(unlist(esbl))
}

entrez2symbol <- function(entrez) {
  symbol <- mget(as.character(entrez), org.Hs.egSYMBOL, ifnotfound = NA)
  symbol <- unlist(lapply(symbol, function(i) return(i[1])))
  return(symbol)
}

entrez2genename <- function(entrez) {
  symbol <- mget(as.character(entrez), org.Hs.egGENENAME, ifnotfound = NA)
  symbol <- unlist(lapply(symbol, function(i) return(i[1])))
  return(symbol)
}

getGeneMat <- function(ensIDs) {
  geneMat <- data.frame(ENSEMBL=ensIDs)
  geneMat$ENTREZ <- ensembl2entrez(geneMat$ENSEMBL)
  idxNA <- !is.na(geneMat$ENTREZ)
  sym <- entrez2symbol(na.omit(geneMat$ENTREZ))
  genename <- entrez2genename(na.omit(geneMat$ENTREZ))
  geneMat$Symbol <- NA
  geneMat$Symbol[idxNA] <- sym
  geneMat$Genename <- NA
  geneMat$Genename[idxNA] <- genename
  rownames(geneMat) <- geneMat$ENSEMBL
  return(geneMat)
}
```

# Analyse

## Vorbereitung

### Importieren der Rohdaten aus dem Alignment und der Quantifizierung

Das ausrichten der Sequenzierungsschnipsel (Alignment der Reads) wurde mit dem Progamm **STAR** gemacht. STAR bietet außerdem die Möglichkeit auch gleich die Qunatifizierung der Expression vorzunemhen. Dabei wurde der Parameter `--quantMode GeneCount` verwendet. Hierzu wurde eine sogenannte GTF/ GFF Annotationsdatei benutzt, welche die Information beinhaltet, welches Gene zu welchen chromosomalen Koordinaten gehört. Wir betrachten hier ein *un-stranded*-RNA-Sequenzierungs Experiment.

Die einzelnen *.tab* Dateien beinhalten die Counts pro Gene. Dabei gibt die 1. Spalte den ENSEMBL Gen-Identifier an, z.B. *ENSG00000223972* und die 2. Spalte die entsprechenden un-stranded RNA-Seq Counts. Diese beiden Spalten brauchen wir im Folgenden. Die ersten vier Reihen geben ein paar Zusammenfassungsstatistiken über die Count Datei und werden nicht benötigt.

**Erstellt die Count Matrix und die Genreferenztabelle mit allen Genen und den zugehörigen IDs. Stellt die Count-Matrix, die betrachteten Gene und die Annotation der Proben zu den biologischen Bedingungen innerhalb des HTML Dokuments dar.**

```{r Count Matrix}
library(readxl)
targets <- read_excel(file.path(mainDir, "targets.xlsx"))

# Generate full paths
filePaths <- file.path(mainDir, targets$file)

# Count-Matrix erstellen
countListForMatrix <- lapply(filePaths, function(f) {
  read.table(f, header = FALSE, stringsAsFactors = FALSE)
})
#view(counListForMatrix)

# drop first four rows
countListForMatrix <- lapply(countListForMatrix, function(df) {
  df[-(1:4), ]  # Remove the first four rows
})


# Nur Spalte 2 (unstranded) verwenden und Spalte 1 als Gen-ID
geneIDs <- countListForMatrix[[1]][,1]
cts <- do.call(cbind, lapply(countListForMatrix, function(x) x[,2]))
rownames(cts) <- geneIDs
colnames(cts) <- targets$label


# remove all rows with max counts < 7 (Quality Control)
#cts <- cts[rowMin(cts) >= 7, ]

data.frame(cts)

geneMat <- getGeneMat(rownames(cts))

data.frame(geneMat)

# Make sure row names of colData match colnames of count matrix
colData <- targets
rownames(colData) <- colData$label

# Create DESeq2 dataset
dds_import <- DESeqDataSetFromMatrix(countData = cts,
                              colData = colData,
                              design = ~ group)
head(dds_import, 2)
```

### Vorbereiten des DESeq2 Objektes

Im nächsten Abschnitt wird das DESeq2-Modell erstellt. Damit wird die Grundlage für die spätere Analyse der differentiell exprimierten Gene (DEG) gelegt. Hierbei ist das Handbuch von [DESeq2](https://bioconductor.org/packages/release/bioc/vignettes/DESeq2/inst/doc/DESeq2.html) sehr hilfreich. Wir importieren die Daten auf Grundlage der erstellten Count-Matrix, analog zu [Count-Matrix-Import](https://bioconductor.org/packages/release/bioc/vignettes/DESeq2/inst/doc/DESeq2.html#count-matrix-input). Nach dem Import und dem Erstellen des DESeq2 Objektes müssen wir die Rohdaten einem [Vorfilter](https://bioconductor.org/packages/release/bioc/vignettes/DESeq2/inst/doc/DESeq2.html#pre-filtering) Schritt unterziehen um sehr niedrige Counts zu entfernen. Hierbei is es hilfreich sich zu überlegen, wie viele biologische Replikate wir pro Bedingung haben. Idealerweise entfernt man alle Gene, die im vorliegenden Experiment in Summer über alle Bedingungen weniger als 5-10 Counts haben.

**Wie viele Gene verlieren wir aufgrund von niedriger Expression?**

```{r verlorene Gene}
dds <- dds_import
# count dds rows
countRowsBefore <- nrow(dds)
print(countRowsBefore)

smallestGroupSize <- 2
minCounts <- 10
keep <- rowSums(counts(dds) >= minCounts) >= smallestGroupSize
#keep <- rowSums(counts(dds)) >= minCounts

dds <- dds[keep,]

countRowsAfter <- nrow(dds)
print(countRowsAfter)
print(countRowsBefore - countRowsAfter)

```

### Normalisierung und Differentielle Expression

Nachdem wir die schwach exprimierten Gene entfernt haben können wir die Normalisierung der Daten vornehmen. Dazu müssen wir die *"size factors"* und die *"Dispersion"* bestimmen, damit wir den tatsächlichen Signifikanztest (wir wollen den Wald- Test verwenden) anwenden können. Außerdem müssen wir die normalisierten Expressionswerte extrahieren, damit wir damit z.B. eine PCA erstellen können. Dazu verwenden wir die [*regularized logarithm* (rlog) Transformation](https://bioconductor.org/packages/release/bioc/vignettes/DESeq2/inst/doc/DESeq2.html#regularized-log-transformation). Die Werte können dann mit der Funktion `assay()` extrahiert werden.

## Warum ist die Normalisierung von Counts wichtig?

Die **Normalisierung von RNA-Seq-Daten** ist ein entscheidender Schritt im Analyseprozess. Sie ist notwendig, um technische Variabilität zu beseitigen und sinnvolle Vergleiche der Genexpressionsniveaus zwischen Proben zu ermöglichen.

### Effekte innerhalb einer Probe (*within-sample effect*)

Die Genlänge beeinflusst den Vergleich von Read Counts zwischen verschiedenen Genen **innerhalb** einer Probe.

- Längere Gene erhalten tendenziell mehr Reads, was ohne Korrektur zu verzerrten Ergebnissen führt.

### Effekte zwischen Proben (*between-sample effect*)

Die Sequenziertiefe (Anzahl gelesener Fragmente) beeinflusst den Vergleich von Read Counts **desselben Gens zwischen verschiedenen Proben**.

- Ohne Normalisierung kann es so aussehen, als ob ein Gen unterschiedlich exprimiert ist, obwohl dies nur ein technischer Effekt ist.

```{r Normalisierung und Differentielle Expression}
# Run the standard DESeq2 workflow
dds <- DESeq(
  object = dds,
  test = "Wald",
  fitType = "parametric",
  parallel = TRUE
)

# Variance stabilizing transformation
vsd <- vst(dds, blind=FALSE)
head(assay(vsd), 3)

# Regularized log transformation
rld <- rlog(dds, blind=FALSE)

meanSdPlot(assay(rld))
```

### QC Plot vor und nach der Normalisierung

Zur besseren Interpretation und dem Verständnis der Normalisierung bietet es sich an die Count-Werte der einzelnen Gene als kombinierten Boxplot für die jeweiligen Bedingungen darzustellen; jeweils vor und nach der Normalisierung. Die Konvertierung der Count-Werte in `log2(count + 1)` hat sich in dieser Hinsicht bewährt.

**Erstellt bitte einen Boxplot mit den log-transformierten Counts vor und einen Boxplot nach der Normalisierung.**

Hinweis: Normalisierte Counts erhaltet ihr nach anwenden der `DESeq()` Funktion und der Extraktion der Werte mit `counts(ddsObject, normalized = TRUE)`. Generell empfielt sich **ggplot2** zum Zeichnen zu verweden, da es vielfälltige Möglichkeiten bietet und dadurch sehr ansehnliche Abbildungen erstellen kann. Um ein für ggplot2 passendes `data.frame` zu erstellen, können Pakete wie z.B. reshape2, dplyr, etc. hilfreich sein.

```{r QC Boxplot}

library(DESeq2)
library(tidyr)
library(dplyr)

# Rohcounts
raw_cts <- counts(dds, normalized = FALSE)
raw_cts <- raw_cts[rowSums(raw_cts) > 0, ]
raw_df <- as.data.frame(raw_cts) %>%
  rownames_to_column("Gene") %>%
  pivot_longer(-Gene, names_to = "Sample", values_to = "Count") %>%
  mutate(Type = "Unnormalized")
# dds ist DESeqDataSet
dds <- DESeq(dds)
# Normalisierte Counts
norm_cts <- counts(dds, normalized = TRUE)
norm_cts <- norm_cts[rowSums(norm_cts) > 0, ]
norm_df <- as.data.frame(norm_cts) %>%
  rownames_to_column("Gene") %>%
  pivot_longer(-Gene, names_to = "Sample", values_to = "Count") %>%
  mutate(Type = "Normalized")

# Kombinieren
combined_df <- bind_rows(raw_df, norm_df)

# Plot
ggplot(combined_df, aes(x = Sample, y = log2(Count + 1), fill = Type)) +
  geom_boxplot(outlier.size = 0.3) +
  facet_wrap(~Type) +
  labs(title = "Log2-Boxplots vor und nach Normalisierung",
       y = "log2(Count + 1)", x = "Sample") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))
```

## PCA - Principal Component Analysis

Bevor wir mit der tatsächlichen DEG-Analyse fortfahren berechnen wir eine PCA um einen ersten Eindruck von unseren Daten zu bekommen. Dazu verwenden wir die eben erstellten, normalisierten Expressionswerte (rlog-Werte). In der PCA sollen die Bedingungen als *"individuals"* betrachtet und die Gene als *"variables"*. Im Resultat soll jede Probe dargestellt und in seine Haupkomponenten zerlegt werden. Hierzu könnt ihr z.B. das Paket [FactoMineR](http://factominer.free.fr/factomethods/principal-components-analysis.html) verwenden. Bitte erstellt einen sog. *"Individuals Graph"* mit den Proben und den ersten beiden Hauptkomponenten als Achsen. Wenn ihr das FactoMineR Paket verwendet findet ihr diese Infos unter `pca$ind$coord`. Um einen visuell ansprechenderen Abbildung zu erhalten würde ich empfehlen die Abbildung wieder mit dem Paket **ggplot2** zu erstellen. Mit der Funktion `ggsave()` könnte ihr die mit ggplot2 erstellte Abbildung sehr einfach in ein geeignetes Format, z.B. PDF, png, etc. exportieren.

**Erstellt eine PCA und stellt diese als Abbildung im HTML Dokument dar.**

```{r PCA}
# Lade benötigte Pakete
library(FactoMineR)

# Angenommen, rld ist ein DESeq2::rlog Objekt
# Extrahiere die rlog-Werte als Matrix
rld_mat <- assay(rld)

# Transponiere die Matrix, damit Proben als Zeilen (Individuals) und Gene als Spalten (Variables) vorliegen
rld_mat_t <- t(rld_mat)

# Führe PCA mit FactoMineR durch
pca <- PCA(rld_mat_t, graph = FALSE)

# Extrahiere die Koordinaten der Individuals (Proben) auf den ersten beiden Hauptkomponenten
pca_df <- as.data.frame(pca$ind$coord)
pca_df$Sample <- rownames(pca_df)

# Optional: Füge Metadaten hinzu, z.B. Bedingung
pca_df$group <- colData(rld)$group

# Plot mit Farbzuweisung nach Gruppe
p <- ggplot(pca_df, aes(x = Dim.1, y = Dim.2, color = group, label = Sample)) +
  geom_point(size = 3) +
  geom_text(vjust = -0.5, size = 3) +
  labs(
    title = "PCA: Individuals Graph",
    x = paste0("PC1 (", round(pca$eig[1,2], 1), "%)"),
    y = paste0("PC2 (", round(pca$eig[2,2], 1), "%)")
  ) +
  theme_minimal()

# Speichere die Abbildung als PDF
ggsave("pca_individuals.pdf", plot = p, width = 7, height = 5)
p
```
## Interpretation der PCA

In der **PCA** (Hauptkomponentenanalyse) sieht man deutlich, dass sich die Replikate einer Probe gut zusammen gruppieren. Die verschiedenen Gruppen verteilen sich klar entlang der beiden Hauptkomponenten (PC1 und PC2).

Die PCA hilft dabei, die Gruppierung von Replikaten zu visualisieren und technische oder biologische Ausreißer zu identifizieren. Zum Beispiel kann sie eine falsch beschriftete Bibliothek oder eine kontaminierte Probe aufdecken, indem der Ausreißer in einer anderen Gruppe clustert.

- **Jede Behandlungsgruppe sollte ein eigenes, deutliches Cluster bilden**, was Unterschiede in der Genexpression durch den Einfluss des Wirkstoffs widerspiegelt.
- **Jede Gruppe clustert eng zusammen** (geringe Variation innerhalb der Gruppe). Innerhalb einer Gruppe erwarten wir eine hohe Reproduzierbarkeit (Replikate sollten ähnlich sein).
- **Die Gruppen sind klar voneinander getrennt** (hohe Variation zwischen den Gruppen).

## Differentielle Expressions Analyse

Um die DEG-Analyse durchzuführen müssen wir noch definieren an welchen tatsächlichen Vergleichen wir interessiert sind. Dazu können wir uns eine sog. [Kontrast-Matrix](https://bioconductor.org/packages/release/bioc/vignettes/DESeq2/inst/doc/DESeq2.html#contrasts) erstellen. Folgende Vergleiche sind für uns interessant:

-   Sorafenib vs DMSO und
-   Trametinib vs DMSO,

da wir verstehen wollen, welchen Einfluss die beiden Inhibitoren auf unsere Zellen haben. Für beide Vergleiche bestimmen wir die DEGs und exportieren diese bis zu einem korrigierten (FDR) p-Wert \< 0.05 in eine Tabelle. Hierzu verwenden wir die Funktion `lfcShrink()`. Damit die Tabellen für unsere Kollaborationspartner besser verständlich werden ist es essentiell, dass die Gene mit allen IDs, hautpsächlich aber dem Symbol, in den Ergebnissen enthalten sind.

**Berechnet die DEGs für die beiden Vergleiche Sorafenib vs DMSO und Trametinib vs DMSO. Erstellt Tabellen, die die signifikanten Gene bis zu einem FDR-korrigierten p-Wert \< 0.05 beinhalten. Achtet hier darauf auch das Symbol in der Ergebnistabelle zu haben. Ansonsten fällt die Zuordnung der Gene schwer. Zeigt diese im HTML Dokument. Exportiert die Ergebnisse der DEG-Analyse zusätzlich als Excel-Tabellen.**

Bei der Darstellung der DEG-Ergebnisse innerhalb des HTML Dokuments müsst ihr nicht alle Spalten darstellen. Dies wird schnell sehr unübersichtlich. Ich würde sagen, dass ihr maximal drei Angaben braucht: Symbol, log2FoldChange und den korrigierten p-Wert. Bei der Darstellung innerhalb des HTMLs kann die Funktion `kable()` hilfreich sein.

**Wie viele Gene sind pro Vergleich signifikant reguliert? Wie verteilt sich die Anzahl auf hoch- bzw. runter-regulierte Gene? Stellt diese Ergebnisse anschaulich dar.**

Hinweis: Hierzu könnt ihr den `log2FoldChange` aus der DEG-Analyse verwenden.

```{r DEG-Analyse, message=FALSE, warning=FALSE}
library(DESeq2)
library(openxlsx)
library(dplyr)
library(kableExtra)

# DEG analysis with lfcShrink for more accurate log2FC
sora_res <- lfcShrink(dds, contrast = c("group", "Sorafenib", "DMSO"), type = "normal")
tram_res <- lfcShrink(dds, contrast = c("group", "Trametinib", "DMSO"), type = "normal")

# Annotate with gene symbols
geneMat <- getGeneMat(rownames(sora_res))
sora_annot <- cbind(geneMat, as.data.frame(sora_res))
tram_annot <- cbind(geneMat, as.data.frame(tram_res))

# Filter for significant genes (FDR < 0.05)
sora_sig <- sora_annot %>% filter(!is.na(padj) & padj < 0.05)
tram_sig <- tram_annot %>% filter(!is.na(padj) & padj < 0.05)

# count sora_sig and tram_sig
cat("Number of significant genes for Sorafenib vs DMSO:", nrow(sora_sig), "\n")
cat("Number of significant genes for Trametinib vs DMSO:", nrow(tram_sig), "\n")


# Split into up/down-regulated
sora_up   <- sora_sig %>% filter(log2FoldChange > 0)
sora_down <- sora_sig %>% filter(log2FoldChange < 0)
tram_up   <- tram_sig %>% filter(log2FoldChange > 0)
tram_down <- tram_sig %>% filter(log2FoldChange < 0)

# count up/down-regulated genes
cat("Sorafenib up-regulated genes:", nrow(sora_up), "\n")
cat("Sorafenib down-regulated genes:", nrow(sora_down), "\n")
cat("Trametinib up-regulated genes:", nrow(tram_up), "\n")
cat("Trametinib down-regulated genes:", nrow(tram_down), "\n")

# Summary: number of significant genes
cat("Sorafenib vs DMSO: total =", nrow(sora_sig), 
    "| up =", nrow(sora_up), 
    "| down =", nrow(sora_down), "\n")
cat("Trametinib vs DMSO: total =", nrow(tram_sig), 
    "| up =", nrow(tram_up), 
    "| down =", nrow(tram_down), "\n")

# Export to Excel
write.xlsx(sora_sig, file = file.path(degDIR, "DEGs_Sorafenib_vs_DMSO.xlsx"))
write.xlsx(tram_sig, file = file.path(degDIR, "DEGs_Trametinib_vs_DMSO.xlsx"))

# Barplot: up/down-regulated gene counts
deg_counts <- data.frame(
  Vergleich = rep(c("Sorafenib vs DMSO", "Trametinib vs DMSO"), each = 2),
  Regulation = rep(c("Up", "Down"), 2),
  Anzahl = c(nrow(sora_up), nrow(sora_down), nrow(tram_up), nrow(tram_down))
)

ggplot(deg_counts, aes(x = Vergleich, y = Anzahl, fill = Regulation)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Anzahl signifikanter DEGs (FDR < 0.05)", y = "Gene", x = "") +
  theme_minimal()
```
## Vergleich der Wirkstoffe: Sorafenib vs. Trametinib

**Sorafenib** induziert eine deutlich stärkere genomweite Antwort im Vergleich zu **Trametinib**:

- Über **3500 Gene** sind durch Sorafenib signifikant verändert – die Mehrheit davon ist **herunterreguliert**.
- **Trametinib** führt nur zu **moderaten Veränderungen** mit deutlich weniger differentiell exprimierten Genen.

**Sorafenib** hat einen **breiteren Einfluss auf zelluläre Signalwege** und die **Genexpression**.

### Identifizierte DEGs als Tabellen

#### Sorafenib vs. DMSO

```{r Sorafenib vs DMSO up-regulated}
# Tabellarische Darstellung der signifikanten DEGs für Sorafenib vs DMSO
kable(sora_up[, c("Symbol", "log2FoldChange", "padj")], 
      col.names = c("Symbol", "log2FC", "adj. p-value"), 
      caption = "Signifikante DEGs Sorafenib vs DMSO (up-reguliert)") %>%
  kable_styling() %>%
  scroll_box(width = "100%", height = "400px")
```

```{r Sorafenib vs DMSO down-regulated}
# Tabellarische Darstellung der signifikanten DEGs für Sorafenib vs DMSO
kable(sora_down[, c("Symbol", "log2FoldChange", "padj")], 
      col.names = c("Symbol", "log2FC", "adj. p-value"), 
      caption = "Signifikante DEGs Sorafenib vs DMSO (down-reguliert)") %>%
  kable_styling() %>%
  scroll_box(width = "100%", height = "400px")
```
#### Trametinib vs. DMSO

```{r Trametinib vs DMSO up-regulated}
# Tabellarische Darstellung der signifikanten DEGs für Trametinib vs DMSO
kable(tram_up[, c("Symbol", "log2FoldChange", "padj")], 
      col.names = c("Symbol", "log2FC", "adj. p-value"), 
      caption = "Signifikante DEGs Trametinib vs DMSO (up-reguliert)") %>%
  kable_styling() %>%
  scroll_box(width = "100%", height = "400px")
```

```{r Trametinib vs DMSO down-regulated}
# Tabellarische Darstellung der signifikanten DEGs für Trametinib vs DMSO
kable(tram_down[, c("Symbol", "log2FoldChange", "padj")], 
      col.names = c("Symbol", "log2FC", "adj. p-value"), 
      caption = "Signifikante DEGs Trametinib vs DMSO (down-reguliert)") %>%
  kable_styling() %>%
  scroll_box(width = "100%", height = "400px")
```
#### Gene Ontology Analysis
Die **Gene Ontology (GO)-Analyse** ist ein bioinformatisches Verfahren, das verwendet wird, um die **biologischen Funktionen**, an denen eine Liste von Genen beteiligt ist, systematisch zu beschreiben und zu interpretieren.

Die **Gene Ontology** unterteilt die Genfunktionen in drei Hauptkategorien:

- **Biological Process (BP):**  
  Beschreibt biologische Abläufe oder Prozesse, an denen ein Gen beteiligt ist  
  *z. B. Zellteilung, Apoptose, Immunantwort*

- **Molecular Function (MF):**  
  Beschreibt die molekulare Aktivität eines Gens oder Proteins  
  *z. B. Kinaseaktivität, DNA-Bindung*

- **Cellular Component (CC):**  
  Beschreibt, wo in der Zelle ein Genprodukt lokalisiert ist  
  *z. B. Zellkern, Mitochondrium, Membran*

Sie wird typischerweise nach einer differentiellen Genexpressionsanalyse durchgeführt, um z. B. die Wirkung eines Medikaments auf zelluläre Abläufe besser zu verstehen.

### Hinweis zur Analyse

Für die vorliegende Analyse wurde **ausschließlich der „Biological Process (BP)“-Zweig** der Gene Ontology betrachtet, da dieser Einblick in **komplexe zelluläre und organismische Abläufe** bietet, die durch die Behandlung beeinflusst werden.

```{r GO}
library(clusterProfiler)
library(AnnotationDbi)

sora_up_genes_to_test <- rownames(sora_up)
tram_up_genes_to_test <- rownames(tram_up)
sora_down_genes_to_test <- rownames(sora_down)
tram_down_genes_to_test <- rownames(tram_down)
sora_up_go_results <- enrichGO(
  gene = sora_up_genes_to_test,
  OrgDb = org.Hs.eg.db,
  keyType = "ENSEMBL",
  ont = "BP", # Biological Process
)
tram_up_go_results <- enrichGO(
  gene = tram_up_genes_to_test,
  OrgDb = org.Hs.eg.db,
  keyType = "ENSEMBL",
  ont = "BP", # Biological Process
)
sora_down_go_results <- enrichGO(
  gene = sora_down_genes_to_test,
  OrgDb = org.Hs.eg.db,
  keyType = "ENSEMBL",
  ont = "BP", # Biological Process
)
tram_down_go_results <- enrichGO(
  gene = tram_down_genes_to_test,
  OrgDb = org.Hs.eg.db,
  keyType = "ENSEMBL",
  ont = "BP", # Biological Process
)
# Order GO enrichment results by Count descending
sora_up_go_results@result <- sora_up_go_results@result[order(-sora_up_go_results@result$Count), ]
tram_up_go_results@result <- tram_up_go_results@result[order(-tram_up_go_results@result$Count), ]
sora_down_go_results@result <- sora_down_go_results@result[order(-sora_down_go_results@result$Count), ]
tram_down_go_results@result <- tram_down_go_results@result[order(-tram_down_go_results@result$Count), ]
```

Barplots der GO Ergebnisse für Sorafenib Up-Regulierte Gene:

```{r GO Plot Sora Up, fig.width=12, fig.height=10}
barplot(sora_up_go_results, showCategory = 20, main = "GO Enrichment Sorafenib Up-Regulierte Gene")
```
## Sorafenib Up: Konklusion

Die durch **Sorafenib** induzierten Gene sind stark angereichert in **Stoffwechselprozessen**, insbesondere:

- **Lipidabbau**
- **Phospholipid- und Fettsäuremetabolismus**

Zusätzlich werden Gene **hochreguliert**, die auf **oxidativen Stress** und **Xenobiotika** (Fremdstoffe) reagieren.

Dies weist auf **zellinternen Stress** durch Sorafenib hin.

Weitere betroffene Prozesse:

- **Autophagie**
- **Insulinantwort**
- **Proteinabbau**

**Fazit**:  
**Sorafenib** führt zu einer **umfassenden metabolischen Reprogrammierung** und aktiviert **zelluläre Schutzmechanismen**, um mit dem durch den Wirkstoff ausgelösten Stress umzugehen.

Barplots der GO Ergebnisse für Sorafenib Down-Regulierte Gene:

```{r GO Plot Sora Down, fig.width=12, fig.height=10}
barplot(sora_down_go_results, showCategory = 20, main = "GO Enrichment Sorafenib Down-Regulierte Gene")
```
## Sorafenib Down: Konklusion

**Sorafenib** unterdrückt gezielt Gene, die an der **Proteinbiosynthese** beteiligt sind. Besonders betroffen sind:

- **Ribosomenbiogenese**
- **rRNA-Prozesse**
- **RNA-Verarbeitung**

Zusätzlich werden folgende Prozesse signifikant **herunterreguliert**:

- **Nuklearer Transport**
- **mRNA-Splicing**
- **Nukleäre Lokalisation von Proteinen**
- **Kinaseaktivität**
- **Apoptose-regulierende Signalwege**

**Fazit**:  
**Sorafenib hemmt zentrale zelluläre Funktionen** wie **Translation**, **Signalweiterleitung** und **Zellwachstum** – dies unterstützt seine **wirkung als wachstumshemmendes Krebsmedikament**.

Barplots der GO Ergebnisse für Trametinib Up-Regulierte Gene:

```{r Go Plot Tram Up, fig.width=12, fig.height=10}
barplot(tram_up_go_results, showCategory = 20, main = "GO Enrichment Trametinib Up-Regulierte Gene")
```
## Trametinib Up: Konklusion

Für **Trametinib** zeigt sich eine signifikante Anreicherung in **biologischen Prozessen**, die vor allem die **Entwicklung verschiedener Organe und Systeme** betreffen.

Besonders hervorzuheben sind:

- Entwicklung von **Drüsen**, **Leber** und **Verdauungstrakt**
- Entwicklung des **hepatischen** und **urogenitalen Systems**
- **Intrazelluläre Rezeptorsignalwege**
- **Reaktionen auf Vitamine**
- **Differenzierung kardialer vaskulärer glatter Muskelzellen**

**Fazit**:  
**Trametinib** wirkt nicht nur auf Tumorzellen, sondern beeinflusst auch **wichtige Entwicklungs- und Regulationswege** in verschiedenen Geweben.

Barplots der GO Ergebnisse für Trametinib Down-Regulierte Gene:

```{r Go Plot Tram Down, fig.width=12, fig.height=10}
barplot(tram_down_go_results, showCategory = 20, main = "GO Enrichment Trametinib Down-Regulierte Gene")
```
## Trametinib Down:Konklusion

**Trametinib** beeinflusst deutlich **Signalwege und biologische Prozesse**, die mit der **Regulation der Phosphorylierung** und **Kinaseaktivität** verbunden sind.

Dabei werden zentrale zelluläre Vorgänge **vermindert**, darunter:

- **Proliferation von Epithelzellen**
- **Apoptose**
- **Organisation supramolekularer Fasern**
- **Proteinlokalisierung zum Zellkern**

Auch Entwicklungsprozesse sind betroffen, insbesondere:

- **Nervensystementwicklung**, **Gliogenese** und **Gliazell-Differenzierung**
- **Haut- und Mesenchymentwicklung**
- **Reaktion auf oxidativen Stress** und **Xenobiotika**

**Fazit**:  
**Trametinib hemmt die Regulation vielfältiger zellulärer und entwicklungsbezogener Signalwege**, was möglicherweise zur **Hemmung von Tumorwachstum und -Progression** beiträgt.

### Visuelle Darstellung: Volcano Plot

Zusätzlich zur tabellarischen Darstellung der DEG-Ergebnisse kann man diese auch als sog. *"Volcano Plots"* darstellen. Dabei werden alle Gene als Punkte mit ihrem Signifikanzwert (y-Achse) und dem log2FoldChange (x-Achse) dargestellt. Die signifikanten Gene werden dabei farblich hervorgehoben. Mit dem R Paket [EnhancedVolcano](http://www.bioconductor.org/packages/release/bioc/vignettes/EnhancedVolcano/inst/doc/EnhancedVolcano.html) haben wir gute Erfahrungen gemacht.

## Was zeigt ein Volcano Plot?

Ein **Volcano Plot** ist im Prinzip ein **Streudiagramm**, in dem **jedes Punkt ein Gen** repräsentiert.

### Achsen:

- **x-Achse: log₂ Fold Change (log₂FC)**  
  Zeigt, **wie stark ein Gen hoch- oder herunterreguliert** ist

- **y-Achse: −log₁₀(p-Wert oder adjustierter p-Wert)**  
  Zeigt, **wie statistisch signifikant** die Veränderung ist  
  (je höher, desto signifikanter)

### Interpretation der Bereiche im Plot:

- **Oben rechts:**  
  **Stark hochregulierte und statistisch signifikante Gene**  
  hoher log₂FC & niedriger p-Wert

- **Oben links:**  
  **Stark herunterregulierte und statistisch signifikante Gene**  
  niedriger log₂FC & niedriger p-Wert

- **Unten in der Mitte:**  
  **Keine signifikante Änderung**  
  geringer log₂FC & hoher p-Wert  
  Gene zeigen keinen starken Unterschied in der Expression

> Diese Darstellung hilft, Gene zu identifizieren, die sowohl **biologisch relevant (große Änderung)** als auch **statistisch signifikant** sind.

**Erstellt jeweils einen Volcano Plot für die beiden Vergleiche.**


```{r Volcano Plot Sorafenib vs DMSO}
EnhancedVolcano(sora_annot,
    lab = sora_annot$Symbol,
    x = 'log2FoldChange',
    y = 'padj',
    title = 'Volcano Plot: Sorafenib vs DMSO',
    pCutoff = 0.05,
    FCcutoff = 0.5,
    pointSize = 2.0,
    labSize = 3.0,
    legendPosition = 'right',
    colAlpha = 0.8,
    xlim = c(min(sora_annot$log2FoldChange, na.rm=TRUE), max(sora_annot$log2FoldChange, na.rm=TRUE))
)
```
## Volcano Plot Analyse: Sorafenib vs. DMSO

Der Volcano Plot zeigt die differentiell exprimierten Gene unter Sorafenib-Behandlung im Vergleich zu DMSO. Es wurden insgesamt **15.805 Gene analysiert**. 

- Zahlreiche Gene sind **signifikant herunterreguliert**, darunter wichtige Regulatoren wie **TNS4**, **MYC**, **FOSL1** und **SPRY4**.
- Nur wenige Gene sind stark hochreguliert: **CDK1B**, **CDX2**, **BMF**, **SLC40A1**.
- Den Rest sind moderat hoch- bzw. runterreguliert.

#### Volcano Plot: Trametinib vs DMSO

```{r Volcano Plot Trametinib vs DMSO}
EnhancedVolcano(tram_annot,
    lab = tram_annot$Symbol,
    x = 'log2FoldChange',
    y = 'padj',
    title = 'Volcano Plot: Trametinib vs DMSO',
    pCutoff = 0.05,
    FCcutoff = 0.5,
    pointSize = 2.0,
    labSize = 3.0,
    legendPosition = 'right',
    colAlpha = 0.8,
    xlim = c(min(tram_annot$log2FoldChange, na.rm=TRUE), max(tram_annot$log2FoldChange, na.rm=TRUE))
)
```
## Volcano Plot Analyse: Trametinib vs. DMSO

Der Volcano Plot zeigt die differentiell exprimierten Gene unter **Trametinib**-Behandlung im Vergleich zu DMSO. Insgesamt wurden **15.805 Gene analysiert**.

- signifikant herunterregulierte Gene:**TNS4**
- Moderate herunterregulierte Gene:**IER3**, **FOSL1**, **EREG**, **PHC2**, **DDX21**, **TNS4**,
- Nur wenige Gene zeigen eine moderate Hochregulation: **CDX2**, **BMF**, **ASCL2**

## Vergleich der beiden Medikamente

Um die Unterschiede und Gemeinsamkeiten zwischen den beiden Medikamenten bzw. deren jeweilligen Vergleiche zu DMSO zu finden, können wir das R Paket [UpSetR](https://github.com/hms-dbmi/UpSetR) verwenden. Da wir beide Medikament zu DMSO verglichen habenist das Vorgehen sinnvoll und wir können direkt Unterschiede und Gemeinsamkeiten identifizieren. Wir nehmen den Vergleich auf Ebene der signifikant regulierten Gene, getrennt nach hoch- bzw. runter-Regulation, vor. Dazu legen wir uns zwei Listen an, analog zu [Basic Usage](https://cran.r-project.org/web/packages/UpSetR/vignettes/basic.usage.html). Eine für die hoch-regulierten und eine für die runter-regulierten Gene. Danach kann der Befehl `upset(fromList(list))` verwendet werden. Um an die einzelnen Gene in den verschiedenen *"Sets"* zu kommen, stellen wir euch eine Funktion `upSetSets(list)` zur Verfügung. Als Input Parameter übergebt ihr dieser Funktion die Liste, die auch für `upset()` verwendet wird.

**Führt den Vergleich der beiden Medikamente durch.**

```{r}
# function to obtain genes per set
upSetSets <- function(sets){
  list_names <- names(sets)
  attach(sets,warn.conflicts = F)
  res <- lapply(1:length(list_names),function(y){
    combinations <- combn(list_names,y)
    res<-as.list(apply(combinations,2,function(x){
      if(length(x)==1){
        p <- setdiff(get(x),unlist(sapply(setdiff(list_names,x),get)))
      }

      else if(length(x) < length(list_names)){
        p <- setdiff(Reduce(intersect,lapply(x,get)),
        Reduce(union,sapply(setdiff(list_names,x),get)))
      }

      else p <- Reduce(intersect,lapply(x,get))

      if(!identical(p,character(0))) p
      else NA
    }))

    if(y==length(list_names)) {
      res[[1]] <- unlist(res);
      res<-res[1]
    }
    names(res) <- apply(combinations,2,paste,collapse="-")
    res
  })
  result <- lapply(res, function(x) x[!is.na(x)])
  result <- unlist(result, recursive = F)
  result <- lapply(result,function(x) data.frame(ID=x))
  detach(sets)
  return(result)
}
```

```{r Vergleich UpSetR}
# Listen der hoch- und runter-regulierten Gene für beide Medikamente
up_list <- list(
  Sorafenib = sora_up$Symbol,
  Trametinib = tram_up$Symbol
)
down_list <- list(
  Sorafenib = sora_down$Symbol,
  Trametinib = tram_down$Symbol
)

# UpSet-Plot für hoch-regulierte Gene
upset(fromList(up_list), order.by = "freq", mainbar.y.label = "Gemeinsame hoch-regulierte Gene")

# UpSet-Plot für runter-regulierte Gene
upset(fromList(down_list), order.by = "freq", mainbar.y.label = "Gemeinsame runter-regulierte Gene")

# Optional: Zugriff auf die einzelnen Sets
up_sets <- upSetSets(up_list)
down_sets <- upSetSets(down_list)

# Durch beide Medikamente hoch-regulierte Gene
up_sets[["Sorafenib-Trametinib"]]

# Durch beide Medikamente runter-regulierte Gene
down_sets[["Sorafenib-Trametinib"]]
```

### Gemeinsamkeiten

Nachdem wir die DEGs für beide Medikamente identifiziert haben, können wir nun die Gemeinsamkeiten und Unterschiede zwischen den beiden Medikamenten analysieren. Wir haben bereits die hoch- und runter-regulierten Gene in Listen organisiert und können diese nun vergleichen.

Jetzt kennen wir die Gene, die entweder durch beiden Medikamente oder auch nur in dem einen oder dem anderen verändert sind. Aber was machen wir jetzt damit? Wir können uns z.B. der Ressource *"Molecular Signatures Database"* (MSigDB) bedienen.

"MSigDB is a resource of tens of thousands of annotated gene sets for use with GSEA (gene-set enrichment analysis) software".

Die "gene-set enrichment" Analyse ist eine Berechnungsmethode, mit der festgestellt wird, ob ein a priori definierter Satz von Genen statistisch signifikante, übereinstimmende Unterschiede zwischen zwei biologischen Zuständen (z.B. Phänotypen) zeigt. Anders ausgedrückt können wir damit bestimmen, ob die Gene innerhlab der oben bestimmten *"Sets"* einen signifikante "Funktion" haben und daraus schlußfolgern, dass diese "Funktion" in unserem Experiment verändert ist. Für die Analyse verwenden wir den Exakten Test nach Fisher oder auch hypergeometrischer Test. Die Funktion `hyperG()` für den Test stellen wir euch zur Verfügung.

```{r}
hyperG <- function(geneSets,DEgenes,universe, cutoff=0.1, mincount=2, parallel=T, adj.P.Val = F,
                   set.size = NULL){
  #' hyperG
  #' 
  #' @description Calculates Fisher's Exact test with the specified genes and the supplied gene-sets.
  #'
  #' @param geneSets list. Gene-Set the calculation is based on, e.g. go.bp
  #' @param DEgenes character vector. Gene IDs used for testing. Same identifiers as used for the gene-sets, e.g. ENTREZ IDs.
  #' @param universe character vector. Universe gene IDs.
  #' @param cutoff numeric. Cutoff used to identify sig. pathways. Default: 0.1.
  #' @param mincount numeric. Consider only pathways which contain at least mincount genes. Default: 2
  #' @param parallel boolean. Use parallel calculation. Default: TRUE
  #' @param adj.P.Val boolean. Use adjusted p-value for significance filtering. Is always calculated.
  #' @param set.size vector. Min and max size of allowed gene-sets. Default min:10 genes and max:500 genes.
  #'  
  #' @return the significant regualted pathways.
  #' @export
  #' @importFrom foreach, doMC
  
  require(foreach)
  require(doMC)
  if(parallel){
    registerDoMC(cores=detectCores())
    cores=detectCores()
  }else{
    cores=1
  }
  if(!is.null(set.size)){
    print('Set Size Limits')
    idx <- lapply(geneSets,function(x){length(x) <= set.size[2] & length(x) >= set.size[1]})
    geneSets <- geneSets[unlist(idx)]
  }
  l <- length(setdiff(universe,DEgenes))
  DElen <- length(DEgenes)
  results <- mclapply(1:length(geneSets), function(i){
    results <- matrix(data=NA,ncol=7,nrow = 1)
    colnames(results) <- c('Term','Count','Size','p-value','adj.P.Val','odds ratio','GeneIDs')
    geneSet <- intersect(universe, geneSets[[i]])
  e <- intersect(DEgenes,geneSet)
    a <- length(e)
    b <- DElen - a
    c <- length(geneSet) - a
    d <- l - c
    contigency.matrix <- cbind(c(a,b),c(c,d))
    res <- fisher.test(contigency.matrix,alternative = 'greater')
    results[1,'Term'] <- names(geneSets)[i]
    results[1,'Count'] <- a
    results[1,'Size'] <- length(geneSets[[i]])
    results[1,'p-value'] <- res$p.value
    results[1,'odds ratio'] <- res$estimate[[1]]
    # find genes annotated in the consensus term
    if(a > 0){
      genes <- intersect(DEgenes,geneSet)
      eid <- genes
      eid <- eid[order(eid)]
      results[1,'GeneIDs'] <- paste(eid,collapse="|")
    }
    return(results)
  }, mc.cores=cores)
    
  results <- as.data.frame(do.call(rbind, results))
  for(i in c(2, 3, 4, 5)){
    results[, i] <- as.numeric(as.character(results[, i]))
  }
  
  if(nrow(results) != 1){
    results <- results[order(results[,'p-value'],decreasing = FALSE),]
  results[,'adj.P.Val'] <- p.adjust(results[,'p-value'], 'BH')
  if(adj.P.Val){
    results <- as.data.frame(subset(results,results[,'adj.P.Val']<=cutoff))
  }else{
    results <- as.data.frame(subset(results,results[,'p-value']<=cutoff))
  }
    results <- as.data.frame(subset(results,results[,'Count']>=mincount))
  }else results <- as.data.frame(results)
  
  return(results)
}
```

Außer der Funktion benötigen wir noch die entsprechenden Gensets/ Signalwegen, die uns interessieren. Diese können wir direkt über ein R Paket von MSigDB (msigdbr) beziehen. Auch hierzu stellen wir euch eine Funktion zur Verfügung, die das abrufen und erstellen der passenden Gensets vereinfacht. Wir laden uns damit die "Hallmark Gene Sets" direkt mit den *Gen-Symbolen* der Gene als IDs. Das geladene Genset ist eine Liste, die direkt als Input für die Funktion `hyperG()` verwendet werden können.

```{r}
get_geneset_ag <- function(
  species = "Homo sapiens",
  category = NULL,
  subcollection = NULL,
  format = "entrez"
) {
  require(msigdbr)
  db_df <- msigdbr(species = species ,category = category, subcollection = subcollection)
  if(format == "entrez"){
    m_list = db_df %>% split(x = as.character(.$entrez_gene), f = .$gs_name)
    for(idx in 1:length(m_list)){
      m_list[[idx]] <- unique(m_list[[idx]] )
    }
    return(m_list)
  }
  if(format == "symbol"){
    m_list = db_df %>% split(x = .$gene_symbol, f = .$gs_name)
    for(idx in 1:length(m_list)){
      m_list[[idx]] <- unique(m_list[[idx]])
    }
    return(m_list)
  }
  if(format == "df"){
    return(db_df)
  }
}
```

```{r}
# load Hallmark gene set
hallmark <- get_geneset_ag(species = "Homo sapiens", category = "H", format = "symbol")
```

Um die Funktion `hyperG()` ausführen zu können brauchen wir jetzt noch ein sog. *"universe"*. Dieses beinhaltet alle Gene, die in unserem Experiment enthalten sind. Das *"universe"* ist ein Vektor, der alle Gene als Symbole beinhaltet. Es sollten keine NAs und/ oder Duplikate enthalten sein.

**Erstellt das "universe" und führt die funktionelle Analye/ Gene-set Enrichment Analyse mit der hyperG Funktion und den Hallmark Signalwegen durch**

```{r GSEA Universe und Hallmark}
# Universe erstellen: alle untersuchten Gene als Symbol, ohne NA und Duplikate
universe <- unique(na.omit(geneMat$Symbol))

# Hallmark Gensets sind bereits geladen als 'hallmark' (siehe oben)

# GSEA für durch beide Medikamente hoch-regulierte Gene
gsea_up <- hyperG(
  geneSets = hallmark,
  DEgenes = up_sets[["Sorafenib-Trametinib"]]$ID,
  universe = universe,
  cutoff = 0.1,
  mincount = 2,
  parallel = TRUE,
  set.size = c(10,500)
)
gsea_up$Term <- gsub("HALLMARK_", "", gsea_up$Term)

# GSEA für durch beide Medikamente runter-regulierte Gene
gsea_down <- hyperG(
  geneSets = hallmark,
  DEgenes = down_sets[["Sorafenib-Trametinib"]]$ID,
  universe = universe,
  cutoff = 0.1,
  mincount = 2,
  parallel = TRUE,
  set.size = c(10,500)
)
gsea_down$Term <- gsub("HALLMARK_", "", gsea_down$Term)

gsea_tram_up <- hyperG(
  geneSets = hallmark,
  DEgenes = tram_up$Symbol,
  universe = universe,
  cutoff = 0.1,
  mincount = 2,
  parallel = TRUE,
  set.size = c(10,500)
)
gsea_tram_up$Term <- gsub("HALLMARK_", "", gsea_tram_up$Term)

gsea_tram_down <- hyperG(
  geneSets = hallmark,
  DEgenes = tram_down$Symbol,
  universe = universe,
  cutoff = 0.1,
  mincount = 2,
  parallel = TRUE,
  set.size = c(10,500)
)
gsea_tram_down$Term <- gsub("HALLMARK_", "", gsea_tram_down$Term)

gsea_sora_up <- hyperG(
  geneSets = hallmark,
  DEgenes = sora_up$Symbol,
  universe = universe,
  cutoff = 0.1,
  mincount = 2,
  parallel = TRUE,
  set.size = c(10,500)
)
gsea_sora_up$Term <- gsub("HALLMARK_", "", gsea_sora_up$Term)

gsea_sora_down <- hyperG(
  geneSets = hallmark,
  DEgenes = sora_down$Symbol,
  universe = universe,
  cutoff = 0.1,
  mincount = 2,
  parallel = TRUE,
  set.size = c(10,500)
)
gsea_sora_down$Term <- gsub("HALLMARK_", "", gsea_sora_down$Term)
```

### Gemeinsamkeiten: Durch beide Medikamente hoch-regulierte Hallmark Gensets

```{r}
gsea_up
```
## Konklusion: Gemeinsamkeiten der hoch-regulierten Gensets

- **Gemeinsame Aktivierung** zentraler Signalwege für Zelltod (Apoptose) und Stressreaktionen  
- **Beeinflussung von Tumorsuppressorwegen** (z. B. *p53*) sowie **Hormonreaktionen** (z. B. Estrogen)  
- **Beteiligung an metabolischen Prozessen**, insbesondere in Pankreas und Adipogenese  
- **Überlappende Wirkmechanismen** beider Medikamente zur Hemmung des Tumorwachstums
```{r gsea_up enrichment plot}
gsea_up_plot <- gsea_up[order(gsea_up$adj.P.Val), ][1:10, ]
gsea_up_plot$Term <- factor(gsea_up_plot$Term, levels = rev(gsea_up_plot$Term))

ggplot(gsea_up_plot, aes(x = Term, y = -log10(adj.P.Val), fill = Count)) +
  geom_bar(stat = "identity") +
  coord_flip() +
  labs(
    title = "Top 10 Enriched Hallmark Gene Sets (Up-regulated)",
    x = "Gene Set",
    y = "-log10(adj. p-value)",
    fill = "Gene Count"
  ) +
  theme_minimal()
```

```{r Dotplot gsea_up, fig.width=8, fig.height=5}
# Calculate ratio and order by ratio descending, select top 25
gsea_up_plot <- gsea_up
gsea_up_plot$Ratio <- gsea_up_plot$Count / gsea_up_plot$Size
gsea_up_plot <- gsea_up_plot[order(gsea_up_plot$Ratio, decreasing = TRUE), ][1:min(25, nrow(gsea_up_plot)), ]
gsea_up_plot$Term <- factor(gsea_up_plot$Term, levels = rev(gsea_up_plot$Term))

ggplot(gsea_up_plot, aes(x = Ratio, y = Term)) +
  geom_point(aes(size = Count, color = -log10(adj.P.Val))) +
  scale_color_viridis_c(option = "plasma", direction = -1, name = "-log10(adj. p-value)") +
  labs(
    title = "Both Up: Top Enriched Hallmark Gene Sets (Up-regulated, Ordered by Ratio)",
    x = "Gene Ratio (Count / Size)",
    y = "Gene Set",
    size = "Gene Count"
  ) +
  theme_minimal()
```

### Gemeinsamkeiten: Durch beide Medikamente hochregulierte Hallmark Gensets

- **Notch-Signalweg** zeigt die stärkste und signifikanteste Anreicherung Hinweis auf zentrale Rolle bei der behandlungsinduzierten Zellantwort
- **Apoptose**- und **Stressantwort-Gen-Sets (UV-Response)** sind ebenfalls stark beteiligt Zelltodmechanismen werden wahrscheinlich aktiviert
- **Hormonelle Signalwege (Estrogen)** sowie **PI3K/AKT/mTOR**- und **p53-Signalweg** sind moderat angereichert Regulieren Zellzyklus, Wachstum und Überleben
- **Metabolische Signalwege** (Pankreas, Adipogenese, Fettsäuremetabolismus) deuten auf zelluläre Umprogrammierung hin
- **KRAS-Signalweg** ist kaum spezifisch angereichert Keine zentrale Rolle in diesem experimentellen Kontext

**Gemeinsame Aktivierung von Signalwegen für Differenzierung, Apoptose und hormonelle/metabolische Kontrolle legt überlappende, gezielte Wirkmechanismen der eingesetzten Medikamente nahe**

```{r}
gsea_down
```
## Schlussfolgerung: Wirkung auf herunterregulierte Signalwege

- **Gemeinsame Hemmung von Entzündungs- und Immunantwortwegen**  
  (z. B. *TNFα*, *IL2*, *IL6*, *JAK/STAT3*)  
  Deutet auf eine koordinierte Unterdrückung von entzündlichen und immunregulatorischen Prozessen hin

- **Unterdrückung von KRAS-Signalwegen**  
  Da KRAS bei Aktivierung Zellwachstum und -teilung fördert, ist seine Hemmung besonders relevant bei Krebs, wo Mutationen zu permanenter Aktivierung führen können

- **Downregulation von MYC-Zielgenen**  
  Hemmt zentrale zelluläre Prozesse wie Zellwachstum, Proliferation und Stoffwechsel

- **Beeinflussung zellulärer Stressantworten**  
  (z. B. *UV-Response*)  
  Regulierung der Reaktion auf DNA-Schäden und externe Stressoren

- **Reduktion von Apoptose- und Hedgehog-Signalwegen**  
  Diese Prozesse sind zentral für Tumorprogression; ihre Hemmung kann das Überleben und die unkontrollierte Vermehrung von Tumorzellen begünstigen
 
**Die Medikamente beeinflussen zahlreiche Signalwege, die das **Wachstum**, **Überleben** und **Verhalten von Tumorzellen sowie deren Mikroumgebung** steuern. Dies spricht für **komplexe und überlappende Wirkmechanismen** mit potenzieller therapeutischer Relevanz.**

```{r gsea_down enrichment plot}
gsea_down_plot <- gsea_down[order(gsea_down$adj.P.Val), ][1:10, ]
gsea_down_plot$Term <- factor(gsea_down_plot$Term, levels = rev(gsea_down_plot$Term))

ggplot(gsea_down_plot, aes(x = Term, y = -log10(adj.P.Val), fill = Count)) +
  geom_bar(stat = "identity") +
  coord_flip() +
  labs(
    title = "Top 10 Enriched Hallmark Gene Sets (Down-regulated)",
    x = "Gene Set",
    y = "-log10(adj. p-value)",
    fill = "Gene Count"
  ) +
  theme_minimal()
```

```{r Dotplot gsea_down, fig.width=8, fig.height=5}
# Calculate ratio and order by ratio descending, select top 25
gsea_down_plot <- gsea_down
gsea_down_plot$Ratio <- gsea_down_plot$Count / gsea_down_plot$Size
gsea_down_plot <- gsea_down_plot[order(gsea_down_plot$Ratio, decreasing = TRUE), ][1:min(25, nrow(gsea_down_plot)), ]
gsea_down_plot$Term <- factor(gsea_down_plot$Term, levels = rev(gsea_down_plot$Term))

ggplot(gsea_down_plot, aes(x = Ratio, y = Term)) +
  geom_point(aes(size = Count, color = -log10(adj.P.Val))) +
  scale_color_viridis_c(option = "plasma", direction = -1, name = "-log10(adj. p-value)") +
  labs(
    title = "Both Down: Top Enriched KEGG Pathways (Ordered by Ratio)",
    x = "Gene Ratio (Count / Size)",
    y = "KEGG Pathway",
    size = "Gene Count"
  ) +
  theme_minimal()
```
## Gemeinsamkeiten: Durch beide Medikamente runterregulierte Hallmark Gensets
- **TNFα-Signalweg über NF-κB** ist stark herunterreguliert und zeigt einen hohen Enrichment-Faktor  
  Deutet auf eine **gezielte Unterdrückung von Entzündungs- und Überlebenssignalen** hin  
  Dies könnte wesentlich zur **antitumoralen Wirkung** der Behandlung beitragen

- **Inflammatorische Antwort**:  
  Zahlreiche Gene, die an der Entzündungsreaktion beteiligt sind, sind betroffen  
  Hinweis auf eine **breit angelegte Immunsuppression bzw. -modulation**

- Weitere herunterregulierte Signalwege umfassen:  
  - **Notch-** und **p53-Signalweg**: Suppression wichtiger Steuermechanismen für Zellschicksal und DNA-Schadensantwort  
  - **KRAS_SIGNALING_UP**, **Hedgehog**, **TGF-β** und **IL6/STAT3**: Dämpfung wachstums- und differenzierungsfördernder Prozesse  
  - **Metabolische Pfade** wie **Cholesterin-Homöostase**

### Trametinib: Durch Trametinib hoch-regulierte Hallmark Gensets
```{r}
gsea_tram_up
```
```{r Dotplot gsea_tram_up, fig.width=8, fig.height=5}
# Calculate ratio and order by ratio descending, select top 25
gsea_tram_up_plot <- gsea_tram_up
gsea_tram_up_plot$Ratio <- gsea_tram_up_plot$Count / gsea_tram_up_plot$Size
gsea_tram_up_plot <- gsea_tram_up_plot[order(gsea_tram_up_plot$Ratio, decreasing = TRUE), ][1:min(25, nrow(gsea_tram_up_plot)), ]
gsea_tram_up_plot$Term <- factor(gsea_tram_up_plot$Term, levels = rev(gsea_tram_up_plot$Term))

ggplot(gsea_tram_up_plot, aes(x = Ratio, y = Term)) +
  geom_point(aes(size = Count, color = -log10(adj.P.Val))) +
  scale_color_viridis_c(option = "plasma", direction = -1, name = "-log10(adj. p-value)") +
  labs(
    title = "Trametinib Up: Top Enriched Hallmark Gene Sets (Up-regulated, Ordered by Ratio)",
    x = "Gene Ratio (Count / Size)",
    y = "Gene Set",
    size = "Gene Count"
  ) +
  theme_minimal()
```

### Trametinib: Durch Trametinib runter-regulierte Hallmark Gensets
```{r}
gsea_tram_down
```
```{r Dotplot gsea_tram_down, fig.width=8, fig.height=5}
# Calculate ratio and order by ratio descending, select top 25
gsea_tram_down_plot <- gsea_tram_down
gsea_tram_down_plot$Ratio <- gsea_tram_down_plot$Count / gsea_tram_down_plot$Size
gsea_tram_down_plot <- gsea_tram_down_plot[order(gsea_tram_down_plot$Ratio, decreasing = TRUE), ][1:min(25, nrow(gsea_tram_down_plot)), ]
gsea_tram_down_plot$Term <- factor(gsea_tram_down_plot$Term, levels = rev(gsea_tram_down_plot$Term))
ggplot(gsea_tram_down_plot, aes(x = Ratio, y = Term)) +
  geom_point(aes(size = Count, color = -log10(adj.P.Val))) +
  scale_color_viridis_c(option = "plasma", direction = -1, name = "-log10(adj. p-value)") +
  labs(
    title = "Trametinib Down: Top Enriched Hallmark Gene Sets (Down-regulated, Ordered by Ratio)",
    x = "Gene Ratio (Count / Size)",
    y = "Gene Set",
    size = "Gene Count"
  ) +
  theme_minimal()
```
## Gesamtkonklusion: Wirkung von Trametinib auf zelluläre Signalwege

Die Behandlung mit Trametinib beeinflusst eine Vielzahl zentraler Signalwege, die an Tumorwachstum, Zellüberleben, Differenzierung, Immunantwort und Stoffwechsel beteiligt sind:

### Hochregulierte Signalwege
- **Aktivierung des Notch-Signalwegs** Hinweis auf Beeinflussung von Differenzierung und Zellschicksal
- **Starke Anreicherung von Apoptose- und UV-Stressantwort-Genen** Induktion von Zelltod und zellulärem Stress
- **Aktivierung des PI3K/AKT/mTOR-Signalwegs** Regulation von Zellüberleben und Wachstum
- **Estrogen Response (early & late)** Potenzielle hormonelle Reaktionsmechanismen
- **p53-Pathway** leicht aktiviert Beteiligung tumorunterdrückender Mechanismen
- **KRAS_Signaling_DN** hochreguliert Indirekter Hinweis auf KRAS-Hemmung, konsistent mit MEK-Inhibition durch Trametinib

### Herunterregulierte Signalwege
- **Starke Suppression des TNFα/NFκB-Signalwegs** Hemmung von Entzündung und Überlebenssignalen – zentral für die antitumorale Wirkung
- **Downregulation wachstumsfördernder Signalwege** wie *Hedgehog*, *MYC*, *Notch*  
- **Unterdrückung von Immun- und Zytokin-Signalwegen** (*IL2/STAT5, IL6/STAT3*) Mögliche Beeinflussung der Tumormikroumgebung
- **Reduktion von Apoptose- und KRAS_Signal_UP-Genen** Komplexe Effekte auf Zellschicksal und Proliferation
- **Herunterregulierung metabolischer und stressbezogener Prozesse** (*Cholesterin-Homöostase, ROS, Hypoxie, Häm-Metabolismus*) Hinweis auf umfassende metabolische Umstrukturierung

**Die Daten sprechen für **überlappende, breit wirkende Mechanismen**, die das Tumorwachstum auf mehreren Ebenen hemmen.**

```{r}
gsea_sora_up
```
```{r Dotplot gsea_sora_up, fig.width=8, fig.height=5}
# Calculate ratio and order by ratio descending, select top 25
gsea_sora_up_plot <- gsea_sora_up
gsea_sora_up_plot$Ratio <- gsea_sora_up_plot$Count / gsea_sora_up_plot$Size
gsea_sora_up_plot <- gsea_sora_up_plot[order(gsea_sora_up_plot$Ratio, decreasing = TRUE), ][1:min(25, nrow(gsea_sora_up_plot)), ]
gsea_sora_up_plot$Term <- factor(gsea_sora_up_plot$Term, levels = rev(gsea_sora_up_plot$Term))

ggplot(gsea_sora_up_plot, aes(x = Ratio, y = Term)) +
  geom_point(aes(size = Count, color = -log10(adj.P.Val))) +
  scale_color_viridis_c(option = "plasma", direction = -1, name = "-log10(adj. p-value)") +
  labs(
    title = "Sorafenib Up: Top Enriched Hallmark Gene Sets (Up-regulated, Ordered by Ratio)",
    x = "Gene Ratio (Count / Size)",
    y = "Gene Set",
    size = "Gene Count"
  ) +
  theme_minimal()
```

### Sorafenib: Durch Sorafenib runter-regulierte Hallmark Gensets
```{r}
gsea_sora_down
```
```{r Dotplot gsea_sora_down, fig.width=8, fig.height=5}
# Calculate ratio and order by ratio descending, select top 25
gsea_sora_down_plot <- gsea_sora_down
gsea_sora_down_plot$Ratio <- gsea_sora_down_plot$Count / gsea_sora_down_plot$Size
gsea_sora_down_plot <- gsea_sora_down_plot[order(gsea_sora_down_plot$Ratio, decreasing = TRUE), ][1:min(25, nrow(gsea_sora_down_plot)), ]
gsea_sora_down_plot$Term <- factor(gsea_sora_down_plot$Term, levels = rev(gsea_sora_down_plot$Term))

ggplot(gsea_sora_down_plot, aes(x = Ratio, y = Term)) +
  geom_point(aes(size = Count, color = -log10(adj.P.Val))) +
  scale_color_viridis_c(option = "plasma", direction = -1, name = "-log10(adj. p-value)") +
  labs(
    title = "Sorafenib Down: Top Enriched Hallmark Gene Sets (Down-regulated, Ordered by Ratio)",
    x = "Gene Ratio (Count / Size)",
    y = "Gene Set",
    size = "Gene Count"
  ) +
  theme_minimal()
```

## Gesamtkonklusion: Wirkung von Sorafenib auf zelluläre Signalwege

Sorafenib verändert gezielt zentrale Prozesse des Zellstoffwechsels, der Tumorregulation und Immunantwort:

### Hochregulierte Signalwege
- **Starke Aktivierung metabolischer Prozesse**  
  (*Adipogenese, Fettsäure-/Xenobiotika-Metabolismus, oxidative Phosphorylierung*)  
  Hinweis auf **zelluläre Reprogrammierung und Energieanpassung**

- **Aktivierung von Apoptose- und p53-Signalwegen**  
  Förderung von **Tumorzelltod und Stressantworten**

- **Induktion immunologischer Programme**  
  (*Interferon-Alpha/Gamma Response*) Mögliche **Stärkung antitumoraler Immunantwort**

- **KRAS_Signaling_DN** hochreguliert **Funktionelle KRAS-Hemmung**

### Herunterregulierte Signalwege
- **MYC-Targets stark unterdrückt**  
  Hemmung von Zellzyklus, Wachstum, Proliferation – **zentrale antitumorale Wirkung**

- **Hemmung von TNFα/NFκB, IL2/STAT5, IL6/STAT3**  
  **Reduktion entzündlicher und zytokinvermittelter Signalwege**

- **Suppression von KRAS_SIGNALING_UP und p53-Pathway**  
  Komplexe Effekte auf Zellüberleben und Tumorprogression

- **Reduktion hormoneller & stressbezogener Antworten**  
  (*Estrogen, Hedgehog, UPR*) Eingriff in Differenzierungs- und Homöostaseprozesse

Sorafenib wirkt auf **multiple, sich überlappende Signalachsen**:
- Es unterdrückt **zelluläres Wachstum und Proliferation** (MYC, KRAS)
- Fördert **Apoptose und metabolische Reprogrammierung**
- Beeinflusst **Immunantworten und Mikroumgebung**

Dies deutet auf eine **breit angelegte antitumorale Wirkung** hin, mit Einflüssen auf Tumorzellen und deren funktionelles Umfeld.

### Vergleichskonklusion: Sorafenib vs. Trametinib – Wirkung auf zelluläre Signalwege

## Gemeinsamkeiten beider Medikamente

- **Aktivierung von Apoptose- und p53-Signalwegen**  
  Beide fördern **Zelltod und tumorsuppressive Programme**

- **Suppression inflammatorischer Signalwege**  
  (*TNFα/NFκB, IL2/STAT5, IL6/JAK/STAT3*)  
  Hinweise auf **Modulation der Tumormikroumgebung** und entzündungshemmende Effekte

- **Regulation hormoneller Signalwege**  
  (*Estrogen, Androgen*) Beide beeinflussen **hormonabhängige Zellprozesse**

- **Beeinflussung metabolischer und stressbezogener Pfade**  
  (z. B. *UV-Response, oxidative Phosphorylierung, ROS*)  
  **Umstrukturierung des zellulären Stoffwechsels**

## Sorafenib – spezifische Wirkprofile

- **Starke Hochregulation metabolischer Signalwege**  
  (*Adipogenese, Fett-/Häm-/Xenobiotika-Stoffwechsel*)  
  **Zelluläre Reprogrammierung als zentrales Merkmal**

- **Massive Suppression von MYC-Zielgenen**  
  **Blockade von Proliferation und Tumorwachstum**

- **Aktivierung von Interferon-Antworten**  
  **Stärkung immunologischer Effekte**

### Trametinib – spezifische Wirkprofile

- **Aktivierung des Notch-Signalwegs**  
  Einfluss auf **Zelldifferenzierung und Zellschicksal**

- **Downregulation klassischer Proliferationssignale**  
  (*MYC, KRAS_UP, Hedgehog*)  
  **MEK-spezifischer Wachstumsstopp**

- **Indirekte KRAS-Hemmung über Hochregulation von KRAS_Signaling_DN**  
  Mechanistisch konsistent mit der **MEK-Inhibition durch Trametinib**

### Fazit

**Sorafenib** wirkt **breiter auf metabolische Netzwerke und Immunantworten**, während **Trametinib gezielt wachstums- und differenzierungsrelevante MAPK-Signalachsen** angreift.

**Beide Substanzen greifen an mehreren Ebenen des Tumorverhaltens an**, unterscheiden sich jedoch in **Tiefe und Schwerpunkt der molekularen Regulation** – was für **komplementäre therapeutische Ansätze** sprechen könnte.

# Anhang

```{r}
sessionInfo()
```